#!/bin/bash
# ==============================================================================
# Pre-Commit Hook for Sarcopenia Data Cleaning Project
# ==============================================================================
# This hook runs automatically before each commit to ensure code quality
#
# Installation:
#   ./scripts/install_hooks.sh
#
# To bypass (use sparingly):
#   git commit --no-verify

set -e  # Exit on error

echo "🔍 Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Track overall status
FAILED=0

# ==============================================================================
# 1. Check for PHI/PII in Staged Files
# ==============================================================================

echo ""
echo "📋 Checking for PHI/PII..."

# Check for common PHI patterns
if git diff --cached --name-only | xargs grep -l "004-[0-9]\{5\}" 2>/dev/null; then
  echo -e "${RED}❌ ERROR: Potential patient IDs found in staged files${NC}"
  echo "Please remove patient identifiers before committing"
  FAILED=1
else
  echo -e "${GREEN}✓ No PHI patterns detected${NC}"
fi

# ==============================================================================
# 2. Check for Large Data Files
# ==============================================================================

echo ""
echo "📦 Checking for large files..."

# Check for files > 10MB
LARGE_FILES=$(git diff --cached --name-only | while read file; do
  if [ -f "$file" ]; then
    size=$(wc -c < "$file" | tr -d ' ')
    if [ "$size" -gt 10485760 ]; then
      echo "$file ($(($size / 1048576)) MB)"
    fi
  fi
done)

if [ ! -z "$LARGE_FILES" ]; then
  echo -e "${YELLOW}⚠️  WARNING: Large files detected:${NC}"
  echo "$LARGE_FILES"
  echo "Consider using Git LFS or excluding from repository"
  # Don't fail, just warn
else
  echo -e "${GREEN}✓ No large files detected${NC}"
fi

# ==============================================================================
# 3. Run R Lint (Code Style Check)
# ==============================================================================

echo ""
echo "🎨 Checking code style..."

# Check if R files are staged
R_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.R$' || true)

if [ ! -z "$R_FILES" ]; then
  # Run lintr on staged R files
  Rscript -e "
    library(lintr)
    files <- strsplit('$R_FILES', '\n')[[1]]
    all_lints <- list()

    for (file in files) {
      lints <- lint(file)
      if (length(lints) > 0) {
        all_lints[[file]] <- lints
        cat(sprintf('Linting %s:\n', file))
        print(lints)
      }
    }

    if (length(all_lints) > 0) {
      cat('\n❌ Linting issues found. Please fix before committing.\n')
      quit(status = 1)
    }
  " 2>&1

  if [ $? -eq 0 ]; then
    echo -e "${GREEN}✓ Code style looks good${NC}"
  else
    echo -e "${RED}❌ Linting failed${NC}"
    FAILED=1
  fi
else
  echo -e "${GREEN}✓ No R files to lint${NC}"
fi

# ==============================================================================
# 4. Run Unit Tests
# ==============================================================================

echo ""
echo "🧪 Running unit tests..."

# Run tests (skip E2E tests for speed)
Rscript -e "
  library(testthat)
  library(tidyverse)

  # Run tests, excluding slow E2E tests
  test_results <- test_dir('tests/testthat', filter = 'unit|patient', reporter = 'summary')

  # Check for failures
  results_df <- as.data.frame(test_results)
  if (any(results_df\$failed > 0)) {
    cat('\n❌ Tests failed. Please fix before committing.\n')
    quit(status = 1)
  }
" 2>&1

if [ $? -eq 0 ]; then
  echo -e "${GREEN}✓ All tests passed${NC}"
else
  echo -e "${RED}❌ Tests failed${NC}"
  FAILED=1
fi

# ==============================================================================
# 5. Check for Debugging Code
# ==============================================================================

echo ""
echo "🐛 Checking for debugging code..."

# Check for common debugging statements
STAGED_R_FILES=$(git diff --cached --name-only | grep '\.R$' || true)

if [ ! -z "$STAGED_R_FILES" ]; then
  DEBUG_PATTERNS="browser()|debugonce()|debug()|print\(\"DEBUG|cat\(\"DEBUG"

  if echo "$STAGED_R_FILES" | xargs grep -n -E "$DEBUG_PATTERNS" 2>/dev/null; then
    echo -e "${YELLOW}⚠️  WARNING: Potential debugging code found${NC}"
    echo "Please review and remove before committing"
    # Don't fail, just warn
  else
    echo -e "${GREEN}✓ No debugging code detected${NC}"
  fi
fi

# ==============================================================================
# 6. Check Documentation
# ==============================================================================

echo ""
echo "📚 Checking documentation..."

# If R scripts changed, check if documentation updated
if [ ! -z "$R_FILES" ]; then
  # Check if cleaning script changed
  if echo "$R_FILES" | grep -q "01_data_cleaning.R"; then
    # Check if cleaning report was also updated
    if ! git diff --cached --name-only | grep -q "cleaning_report.md"; then
      echo -e "${YELLOW}⚠️  WARNING: Cleaning script changed but report not updated${NC}"
      echo "Consider updating docs/cleaning_report.md"
    fi
  fi
fi

echo -e "${GREEN}✓ Documentation check complete${NC}"

# ==============================================================================
# 7. Security Checks
# ==============================================================================

echo ""
echo "🔒 Running security checks..."

# Check for hardcoded secrets/passwords
SECRET_PATTERNS="password|api_key|secret|token|private_key"

if git diff --cached --name-only | xargs grep -i -E "$SECRET_PATTERNS" 2>/dev/null; then
  echo -e "${YELLOW}⚠️  WARNING: Potential secrets detected${NC}"
  echo "Please review carefully before committing"
  # Don't fail automatically - could be false positive
fi

echo -e "${GREEN}✓ Security check complete${NC}"

# ==============================================================================
# Final Result
# ==============================================================================

echo ""
echo "═══════════════════════════════════════"

if [ $FAILED -eq 1 ]; then
  echo -e "${RED}❌ Pre-commit checks FAILED${NC}"
  echo ""
  echo "Please fix the issues above before committing."
  echo "To bypass this hook (not recommended), use: git commit --no-verify"
  exit 1
else
  echo -e "${GREEN}✅ All pre-commit checks PASSED${NC}"
  echo ""
  echo "Proceeding with commit..."
  exit 0
fi
