name: R-CMD-check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        r: ['4.3.0', 'release']

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.r }}
          use-public-rspm: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libfreetype6-dev \
            libpng-dev \
            libtiff5-dev \
            libjpeg-dev

      - name: Install renv
        uses: r-lib/actions/setup-renv@v2

      - name: Check package
        uses: r-lib/actions/check-r-package@v2
        with:
          error-on: 'warning'

      - name: Run tests
        run: |
          Rscript -e '
            library(testthat)
            test_results <- test_dir("tests/testthat", reporter = "summary")
            results_df <- as.data.frame(test_results)

            if (any(results_df$failed > 0)) {
              cat("❌ Tests failed\n")
              quit(status = 1)
            }

            cat("✓ All tests passed\n")
          '

      - name: Calculate coverage
        run: |
          Rscript -e '
            library(covr)

            cov <- package_coverage()
            pct <- percent_coverage(cov)

            cat(sprintf("Coverage: %.1f%%\n", pct))

            if (pct < 80) {
              cat("❌ Coverage below 80%\n")
              quit(status = 1)
            }

            cat("✓ Coverage meets threshold (≥80%)\n")
          '

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Lint code
        run: |
          Rscript -e '
            library(lintr)

            lints <- lint_package()

            if (length(lints) > 0) {
              print(lints)
              cat("⚠️  Linting issues found\n")
              # Non-blocking for now
            } else {
              cat("✓ No linting issues\n")
            }
          '
        continue-on-error: true

  style-check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - name: Check code style
        run: |
          Rscript -e '
            install.packages("styler")
            library(styler)

            # Check if code needs styling
            style_needed <- !style_pkg(dry = "on")

            if (style_needed) {
              cat("❌ Code needs styling\n")
              cat("Run styler::style_pkg() locally\n")
              quit(status = 1)
            }

            cat("✓ Code style is good\n")
          '
        continue-on-error: true

  documentation-check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Check required documentation
        run: |
          required_files="README.md LICENSE DESCRIPTION"
          missing=""

          for file in $required_files; do
            if [ ! -f "$file" ]; then
              missing="$missing $file"
            fi
          done

          if [ -n "$missing" ]; then
            echo "❌ Missing required files:$missing"
            exit 1
          fi

          echo "✓ All required documentation files present"

      - name: Check README has Testing section
        run: |
          if ! grep -q "Testing" README.md; then
            echo "⚠️  README should have a Testing section"
          else
            echo "✓ README has Testing section"
          fi

  notification:
    runs-on: ubuntu-latest
    needs: [R-CMD-check, style-check, documentation-check]
    if: always()

    steps:
      - name: Check job results
        run: |
          if [ "${{ needs.R-CMD-check.result }}" != "success" ]; then
            echo "❌ R CMD check failed"
            exit 1
          fi

          echo "✓ All checks passed"
